#+title: Why another blogging program?
#+author: John Soo
#+email: jsoo1@asu.edu
#+date: 2020-04-26
#+slug: why-another-blogging-program
#+description: Why I wrote this program.

* No one asks for more blogging software.

But I did want to write some posts.
I wanted to finally host my own site and show my own work.

I was begged to use a common static site generator or repository integration.
But I thought: blogs can be more transparent to the author.
Writing a blog need not imply submitting markup to an opaque binary program.
Theming and styling can be transparent and alive to the author.
Hosting and runtime, similarly, might be closer to the author's fingertips.

Moreover: the humble blog presents an opportunity to bring a problem into a language.

[[https://twitter.com/GabrielG439/status/1186451668944113664?s=20][Gabriel Gonzalez says the following]].
Also - note the lack of quote formatting, I'll come back to that.

#+BEGIN_SRC none
Your average developer will struggle with things not built into their programming language, including operations, security, packaging, and distributed systems

Many engineering problems are actually programming language problems in disguise
#+END_SRC

I also always try to take any opportunity I can to learn about computing, so I set out with two design goals.
These goals are definitely not met yet, but I have learned a lot so far.

1. Use as few tools as possible - ideally bringing everything under the programming language.

2. Be as polymorphic in the runtime and hosting as possible.

* Goal 1 - Bring disparate tools closer together, preferably under the language.

This means that if I can write blog posts in plain text or a markup language, so be it.
But, those posts should be statically checked.
I do not want to have to do so much extra work to validate, load, and ensure their existence in a static directory, etc.
Ideally, the blog post should be as much a language construct as possible.

This would go for styling, deployment, (comments?!) and more.

#+BEGIN_SRC hs
print "hi"
#+END_SRC

would this be how I would go about it?

I am not sure.

#+BEGIN_SRC coq
Inductive nat : Type :=
| s : nat -> nat
| z : nat.
#+END_SRC

* Some other heading
